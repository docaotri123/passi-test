service: passii
# Framework version constraint (semver constraint): '3', '^2.33'
frameworkVersion: '3'
	
# Configuration validation: 'error' (fatal error), 'warn' (logged to the output) or 'off' (default: warn)
# See https://www.serverless.com/framework/docs/configuration-validation
configValidationMode: error
plugins:
    - serverless-offline
    - serverless-plugin-typescript
    - serverless-bundle
    # - ./plugins/stacks/split-stacks.js

provider:
    name: aws
    runtime: nodejs16.x
    deploymentMethod: direct
    stage: ${opt:stage, 'dev'}
    region: ap-southeast-1
    timeout: 10
    versionFunctions: false
    environment: ${self:custom.env}
    # role: ${self:custom.env.LAMBDA_ROLE_ARN}
    # vpc:
    #     securityGroupIds:
    #         - ${self:custom.env.SECURITY_GROUP_ID}
    #     subnetIds:
    #         - ${self:custom.env.SUBNET_ID_A}
    #         - ${self:custom.env.SUBNET_ID_B}

custom:
    splitStacks:
        perFeature: true
        perFunction: false
        perType: false
        perGroupFunction: false
    apigwBinary:
        types:
            - 'multipart/form-data'
    env: ${file(./serverless.${self:provider.stage}.env.yml)}
    stackName: ${opt:stackName, 'dev'}
    projectName: ${opt:projectName, 'passii'}
    serverlessPluginTypescript:
        tsConfigFileLocation: './tsconfig.build.json'
functions:
    - ${file(resources/functions/otp.yml)}
# resources:
#     - ${file(resources/gateway.yml)}
# only include the Prisma binary required on AWS Lambda while packaging
package:
    # Create an optimized package for our functions 
    individually: true
    patterns:
        - '!.vscode/**'
        - '!.github/**'
        - '!bin'
        - '!.env'
        - '!.eslintrc.json'
        - '!.gitignore'
        - '!.prettierrc.json'
        - '!LICENSE'
        - '!README.md'
        - '!package-lock.json'
