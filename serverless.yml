service: passii

plugins:
    - serverless-offline
    - serverless-apigw-binary
    - serverless-api-gateway-throttling
    - ./plugins/stacks/split-stacks.js

provider:
    name: aws
    runtime: nodejs16.x
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'ap-southeast-1'}
    timeout: ${opt:timeout, 10}
    versionFunctions: false
    environment: ${self:custom.env}
    # role: ${self:custom.env.LAMBDA_ROLE_ARN}
    # vpc:
    #     securityGroupIds:
    #         - ${self:custom.env.SECURITY_GROUP_ID}
    #     subnetIds:
    #         - ${self:custom.env.SUBNET_ID_A}
    #         - ${self:custom.env.SUBNET_ID_B}

custom:
    splitStacks:
        perFeature: true
        perFunction: false
        perType: false
        perGroupFunction: false
    apigwBinary:
        types:
            - 'multipart/form-data'
    env: ${file(./serverless.${self:provider.stage}.env.yml)}
    stackName: ${opt:stackName, 'dev'}
    projectName: ${opt:projectName, 'passii'}
    authorizer:
        name: authorizer
        type: request
        resultTtlInSeconds: 0
        identitySource: method.request.header.Authorization
    apiGatewayThrottling:
        maxRequestsPerSecond: 1000
        maxConcurrentRequests: 500
functions:
    - ${file(resources/functions/otp.yml)}
# resources:
#     - ${file(resources/gateway.yml)}
# only include the Prisma binary required on AWS Lambda while packaging
package:
    patterns:
        - '!node_modules/.prisma/client/libquery_engine-*'
        - 'node_modules/.prisma/client/libquery_engine-rhel-*'
        - '!node_modules/prisma/libquery_engine-*'
        - '!node_modules/@prisma/engines/**'
